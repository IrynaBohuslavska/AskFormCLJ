{"version":3,"sources":["diplomaform/events.cljs"],"mappings":";AAOA,yDAAA,zDAACA,kKAEA,WAAKC,EAAEA;AAAP,AACEC;;AAEH,yDAAA,zDAACC,2JAEA,WAAAC,SAAcH;AAAd,AAAA,IAAAI,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;SAAA,AAAAE,4CAAAF,eAAA,hEAAMG;AAAN,AAAA,kDAAA,iEAAA,2CAAA,uDAAA,mDAAA,mDAAA,2BAAA,2DAAA,OAAA,2FAAA,iOAAA,iEAAA,mFAAA,8GAAA,gEAAA,mFAAA,vpBAIwB,AAACC,4GACQ,+BAAA,2CAAA,8DAAA,xIAACA;;AAInC,yDAAA,zDAACN,mKAEA,WAAAO,SAAcT;AAAd,AAAA,IAAAU,aAAAD;IAAAC,iBAAA,AAAAL,4BAAAK;SAAA,AAAAJ,4CAAAI,eAAA,hEAAMH;AAAN,AAAA,kDAAA,iEAAA,2CAAA,uDAAA,mDAAA,mDAAA,4BAAA,2DAAA,OAAA,2FAAA,iOAAA,iEAAA,mFAAA,sHAAA,gEAAA,mFAAA,/pBAIiC,AAACC,4GACD,+BAAA,2CAAA,8DAAA,xIAACA;;AAKnC,yDAAA,zDAACN,iKAEA,kBAAAS,PAAKG;AAAL,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAaZ;UAAb,AAAAa,4CAAAD,WAAA,IAAA,jEAAeG;AAAf,AAAA,kDAAA,iEAAA,2CAAA,uDAAA,oDAAA,mDAAA,gCAAA,4DAAA,2DAAA,OAAA,0FAAA,iOAAA,iEAAA,mFAAA,uHAAA,gEAAA,mFAAA,/xBAGiCA,gIAEA,AAACC,2GACD,+BAAA,2CAAA,8DAAA,xIAACR;;AAInC,yDAAA,zDAACT,wKAEA,cAAAkB,HAAKV;AAAL,AAAA,IAAAW,aAAAD;QAAA,AAAAJ,4CAAAK,WAAA,IAAA,/DAASlB;eAAT,AAAAa,4CAAAK,WAAA,IAAA,tEAAWC;AAAX,AAEE,OAACC,mDAAQD;;AAGZ,yDAAA,zDAACpB,+JAEA,cAAAsB,HAAKd;AAAL,AAAA,IAAAe,aAAAD;QAAA,AAAAR,4CAAAS,WAAA,IAAA,/DAAStB;eAAT,AAAAa,4CAAAS,WAAA,IAAA,tEAAWH;AAAX,AACE,wDAAA,jDAACI,8CAAMhB,wDACA,AAACa,mDAAQD;;AAEnB,yDAAA,zDAACjB,mIAEA,cAAAsB,HAAKjB;AAAL,AAAA,IAAAkB,aAAAD;QAAA,AAAAX,4CAAAY,WAAA,IAAA,/DAASzB;eAAT,AAAAa,4CAAAY,WAAA,IAAA,tEAAWN;AAAX,AACE,OAACO,qGAAIP;;AAGR,yDAAA,zDAACpB,uKAEA,cAAA4B,HAAKpB;AAAL,AAAA,IAAAqB,aAAAD;QAAA,AAAAd,4CAAAe,WAAA,IAAA,/DAAS5B;eAAT,AAAAa,4CAAAe,WAAA,IAAA,tEAAWT;AAAX,AACE,wDAAA,jDAACI,8CAAMhB,+DACA,AAACa,mDAAQD","names":["re_frame.core.reg_event_db","_","diplomaform.db/default-db","re_frame.core.reg_event_fx","p__62113","map__62114","cljs.core/--destructure-map","cljs.core.get","db","ajax.core/json-response-format","p__62115","map__62116","p__62117","vec__62118","cljs.core.nth","_world","val","ajax.core/json-request-format","p__62121","vec__62122","response","cljs.core.js__GT_clj","p__62125","vec__62126","cljs.core.assoc","p__62129","vec__62130","cljs.core.prn","p__62133","vec__62134"],"sourcesContent":["(ns diplomaform.events\n   (:require\n    [re-frame.core :as re-frame]\n    [diplomaform.db :as db]\n    [ajax.core :as ajax]\n    [day8.re-frame.http-fx]))\n\n(re-frame/reg-event-db\n ::initialize-db\n (fn [_ _]\n   db/default-db))\n\n(re-frame/reg-event-fx\n ::something\n (fn [{db :db} _] \n   {:http-xhrio {:method          :get\n                 :uri             \"http://localhost:3000/qa\"\n                 :timeout         8000\n                 :format (ajax/json-response-format)\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :on-success      [::generate-db]\n                 :on-failure      [:bad-http-result]}}))   \n\n(re-frame/reg-event-fx\n ::something-res\n (fn [{db :db} _]\n   {:http-xhrio {:method          :get\n                 :uri             \"http://localhost:3000/res\"\n                 :timeout         8000\n                 :format          (ajax/json-response-format)\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :on-success      [::generate-db-res]\n                 :on-failure      [:bad-http-result]}}))\n\n\n(re-frame/reg-event-fx\n ::post-results\n (fn [_world [_ val]]\n   {:http-xhrio {:method          :post\n                 :uri             \"http://localhost:3000/answers\"\n                 :params          val\n                 :timeout         5000\n                 :format          (ajax/json-request-format)\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :on-success      [::generate-answers]\n                 :on-failure [:bad-http-result]}}))\n\n(re-frame/reg-event-db\n ::generate-answers\n (fn [db [_ response]]\n  ;;  (assoc db :data\n   (js->clj response)))\n;; )\n\n(re-frame/reg-event-db\n ::generate-db\n (fn [db [_ response]]\n   (assoc db :data\n          (js->clj response))))\n\n(re-frame/reg-event-fx\n :bad-http-result\n (fn [db [_ response]]\n   (prn response)\n   ))\n\n(re-frame/reg-event-db\n ::generate-db-res\n (fn [db [_ response]]\n   (assoc db :answers\n          (js->clj response))))"]}