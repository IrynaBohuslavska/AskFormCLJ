{"version":3,"sources":["clojure/core/rrb_vector/rrbt.cljs"],"mappings":"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","names":["clojure.core.rrb-vector.rrbt/rrbt-concat-threshold","clojure.core.rrb-vector.rrbt/max-extra-search-steps","clojure$core$rrb-vector$rrbt$AsRRBT$_as_rrbt$dyn","x__4521__auto__","m__4522__auto__","clojure.core.rrb-vector.rrbt/-as-rrbt","goog/typeOf","m__4519__auto__","cljs.core/missing-protocol","clojure.core.rrb-vector.rrbt/AsRRBT","v","this__4461__auto__","writer__4462__auto__","opt__4463__auto__","cljs.core/-write","clojure.core.rrb-vector.rrbt/RRBChunkedSeq","clojure.core.rrb-vector.rrbt/->RRBChunkedSeq","vec","node","i","off","meta","__hash","coll","cljs.core/pr-str*","this","writer","opts","cljs.core/pr-sequential-writer","cljs.core/pr-writer","m","clojure.core.rrb-vector.rrbt/rrb-chunked-seq","other","cljs.core/equiv-sequential","s","G__63752","G__63753","G__63754","G__63755","G__63740","G__63741","G__63742","G__63743","o","cljs.core/cons","cljs.core/with-meta","cljs.core/List","cljs.core.array_chunk","l","cljs.core/-count","G__63756","G__63757","G__63758","G__63759","G__63760","G__63761","h__4330__auto__","cljs.core/hash-ordered-coll","f","cljs.core.ci_reduce","cljs.core.subvec","cljs.core/count","start","var_args","G__63763","js/Error","cnt","shift","root","tail","clojure.core.rrb-vector.trees/array-for","clojure.core.rrb-vector.rrbt/slice-right","end","arr","new-arr","js/Array","cljs.core/array-copy","cljs.core/->VectorNode","reg?","clojure.core.rrb-vector.nodes/regular?","rngs","clojure.core.rrb-vector.nodes/node-ranges","j","child-end","ce","cljs.core/mod","new-child","G__63764","G__63765","G__63766","regular-child?","new-child-rng","clojure.core.rrb-vector.nodes/last-range","new-rngs","step","n__4706__auto__","clojure.core.rrb-vector.rrbt/slice-left","new-len","len","child-start","x__4309__auto__","y__4310__auto__","G__63767","G__63768","G__63769","G__63770","rng0","r","cljs.core/PROTOCOL_SENTINEL","unused__23367__auto__","self__","G__63786","args63771","cljs.core/aclone","clojure.core.rrb-vector.rrbt/Vector","clojure.core.rrb-vector.rrbt/->Vector","that","clojure.core.rrb-vector.trees/tail-offset","cljs.core.array_seq","clojure.core.rrb_vector.rrbt.rrb_chunked_seq","_","tail-off","idx","cljs.core/vector-index-out-of-bounds","not-found","val","tail-len","new-tail","tail-node","clojure.core.rrb-vector.nodes/overflow?","new-root","G__63783","clojure.core.rrb-vector.trees/new-path","root-total-range","G__63784","G__63785","clojure.core.rrb-vector.trees/push-tail","cljs.core/PersistentVector","cljs.core/-with-meta","root-cnt","clojure.core.rrb-vector.trees/pop-tail","clojure.core.rrb-vector.nodes/empty-node","clojure.core.rrb-vector.trees/do-assoc","cljs.core/RSeq","k","init","lim","G__63775","G__63776","G__63777","cljs.core/deref","cljs.core/reduced?","cljs.core.compare_indexed","G__63778","G__63779","G__63780","G__63781","G__63782","clojure.core.rrb-vector.rrbt/->Transient","clojure.core.rrb-vector.transients/editable-root","clojure.core.rrb-vector.transients/editable-tail","new-cnt","cljs.core/empty","tail-cut?","G__63787","G__63788","clojure.core.rrb-vector.rrbt/splice-rrbts","cljs.core/meta","cljs.core/Subvec","clojure.core.rrb-vector.protocols/-slicev","clojure.core.rrb-vector.rrbt/shift-from-to","from","to","G__63789","G__63790","G__63791","clojure.core.rrb-vector.rrbt/slot-count","clojure.core.rrb-vector.nodes/index-of-nil","clojure.core.rrb-vector.rrbt/subtree-branch-count","cs","sbc","temp__5751__auto__","child","clojure.core.rrb-vector.rrbt/leaf-seq","p1__63792#","cljs.core.mapcat","cljs.core.take","clojure.core.rrb-vector.rrbt/rebalance-leaves","n1","cnt1","n2","cnt2","transferred-leaves","slc1","slc2","a","sbc1","sbc2","p","e","cljs.core/quot","new-n1","bs","cljs.core.partition_all","cljs.core.concat","temp__5753__auto__","cljs.core/seq","xs__6308__auto__","cljs.core/first","block","xs","cljs.core/next","clojure.core.rrb-vector.nodes/regular-ranges","new-arr1","new-arr2","new-n2","clojure.core.rrb-vector.rrbt/child-seq","cseq","c","gcs","cljs.core.map","cljs.core/list","cljs.core/-","clojure.core.rrb-vector.rrbt/rebalance","vec__63793","cljs.core.nth","gc","gcr","new-rngs1","new-rngs2","vec__63796","tbs","li","d","clojure.core.rrb-vector.rrbt/zippath","vec__63799","c1","clojure.core.rrb-vector.nodes/last-child","c2","clojure.core.rrb-vector.nodes/first-child","ccnt1","ccnt2","next-transferred-leaves","cljs.core/Box","new-c1","new-c2","G__63802","G__63803","G__63804","G__63805","G__63806","G__63807","clojure.core.rrb-vector.nodes/replace-rightmost-child","clojure.core.rrb-vector.nodes/replace-leftmost-child","clojure.core.rrb-vector.nodes/remove-leftmost-child","clojure.core.rrb-vector.rrbt/squash-nodes","arr1","arr2","li1","li2","slots","rngs1","rngs2","cljs.core/last","p1__63808#","v1","v2","cljs.core.into","vec__63809","vec__63812","s1","s2","r1","o?","clojure.core.rrb-vector.nodes/new-path*","clojure.core.rrb-vector.nodes/fold-tail","r2","x__4306__auto__","y__4307__auto__","ncnt1","ncnt2","G__63815","clojure.core.rrb-vector.rrbt/Transient","tidx","G__63816","G__63817","G__63818","clojure.core.rrb-vector.transients/push-tail!","trimmed-tail","key","clojure.core.rrb-vector.transients/do-assoc!","new-tail-base","new-tidx","clojure.core.rrb-vector.transients/pop-tail!","clojure.core.rrb-vector.transients/ensure-editable"],"sourcesContent":["(ns clojure.core.rrb-vector.rrbt\n  (:refer-clojure :exclude [array-for push-tail pop-tail new-path do-assoc])\n  (:require [clojure.core.rrb-vector.protocols\n             :refer [PSliceableVector -slicev\n                     PSpliceableVector -splicev]]\n            [clojure.core.rrb-vector.nodes\n             :refer [regular? empty-node node-ranges overflow? last-range\n                     regular-ranges first-child last-child remove-leftmost-child\n                     replace-leftmost-child replace-rightmost-child\n                     fold-tail new-path* index-of-nil]]\n            [clojure.core.rrb-vector.trees\n             :refer [tail-offset array-for push-tail pop-tail new-path\n                     do-assoc]]\n            [clojure.core.rrb-vector.transients\n             :refer [ensure-editable editable-root editable-tail push-tail!\n                     pop-tail! do-assoc!]]))\n\n(def ^:const rrbt-concat-threshold 33)\n(def ^:const max-extra-search-steps 2)\n\n(defprotocol AsRRBT\n  (-as-rrbt [v]))\n\n;;; chunked seqs: can't reuse cljs.core's without tweaks, since rrb\n;;; vectors have a different array-for\n\n(declare rrb-chunked-seq)\n\n(deftype RRBChunkedSeq [vec node i off meta ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n\n  IPrintWithWriter\n  (-pr-writer [this writer opts]\n    (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts this))\n\n  IWithMeta\n  (-with-meta [coll m]\n    (rrb-chunked-seq vec node i off m))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ISeqable\n  (-seq [coll] coll)\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  ASeq\n  ISeq\n  (-first [coll]\n    (aget node off))\n\n  (-rest [coll]\n    (if (< (inc off) (alength node))\n      (let [s (rrb-chunked-seq vec node i (inc off))]\n        (if (nil? s)\n          ()\n          s))\n      (-chunked-rest coll)))\n\n  INext\n  (-next [coll]\n    (if (< (inc off) (alength node))\n      (let [s (rrb-chunked-seq vec node i (inc off))]\n        (if (nil? s)\n          nil\n          s))\n      (-chunked-next coll)))\n\n  ICollection\n  (-conj [coll o]\n    (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll]\n    (with-meta cljs.core.List.EMPTY meta))\n\n  IChunkedSeq\n  (-chunked-first [coll]\n    (array-chunk node off))\n\n  (-chunked-rest [coll]\n    (let [l (alength node)\n          s (when (< (+ i l) (-count vec))\n              (rrb-chunked-seq vec (+ i l) 0))]\n      (if (nil? s)\n        ()\n        s)))\n\n  IChunkedNext\n  (-chunked-next [coll]\n    (let [l (alength node)\n          s (when (< (+ i l) (-count vec))\n              (rrb-chunked-seq vec (+ i l) 0))]\n      (if (nil? s)\n        nil\n        s)))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  IReduce\n  (-reduce [coll f]\n    (ci-reduce (cljs.core/subvec vec (+ i off) (count vec)) f))\n\n  (-reduce [coll f start]\n    (ci-reduce (cljs.core/subvec vec (+ i off) (count vec)) f start)))\n\n(defn rrb-chunked-seq\n  ([vec i off]\n     (let [cnt   (.-cnt vec)\n           shift (.-shift vec)\n           root  (.-root vec)\n           tail  (.-tail vec)]\n       (RRBChunkedSeq. vec (array-for cnt shift root tail i) i off nil nil)))\n  ([vec node i off]\n     (RRBChunkedSeq. vec node i off nil nil))\n  ([vec node i off meta]\n     (RRBChunkedSeq. vec node i off meta nil)))\n\n(defn slice-right [node shift end]\n  (if (zero? shift)\n    ;; potentially return a short node, although it would be better to\n    ;; make sure a regular leaf is always left at the right, with any\n    ;; items over the final 32 moved into tail (and then potentially\n    ;; back into the tree should the tail become too long...)\n    (let [arr     (.-arr node)\n          new-arr (make-array end)]\n      (array-copy arr 0 new-arr 0 end)\n      (->VectorNode nil new-arr))\n    (let [reg? (regular? node)\n          rngs (if-not reg? (node-ranges node))\n          i    (bit-and (bit-shift-right (dec end) shift) 0x1f)\n          i    (if reg?\n                 i\n                 (loop [j i]\n                   (if (<= end (aget rngs j))\n                     j\n                     (recur (inc j)))))\n          child-end (if reg?\n                      (let [ce (mod end (bit-shift-left 1 shift))]\n                        (if (zero? ce) (bit-shift-left 1 shift) ce))\n                      (if (pos? i)\n                        (- end (aget rngs (dec i)))\n                        end))\n          arr       (.-arr node)\n          new-child (slice-right (aget arr i) (- shift 5) child-end)\n          regular-child? (if (== shift 5)\n                           (== 32 (alength (.-arr new-child)))\n                           (regular? new-child))\n          new-arr   (make-array (if (and reg? regular-child?) 32 33))\n          new-child-rng  (if regular-child?\n                           (let [m (mod child-end (bit-shift-left 1 shift))]\n                             (if (zero? m) (bit-shift-left 1 shift) m))\n                           (if (== shift 5)\n                             (alength (.-arr new-child))\n                             (last-range new-child)))]\n      (array-copy arr 0 new-arr 0 i)\n      (aset new-arr i new-child)\n      (if-not (and reg? regular-child?)\n        (let [new-rngs (make-array 33)\n              step     (bit-shift-left 1 shift)]\n          (if reg?\n            (dotimes [j i]\n              (aset new-rngs j (* (inc j) step)))\n            (dotimes [j i]\n              (aset new-rngs j (aget rngs j))))\n          (aset new-rngs i (+ (if (pos? i) (aget new-rngs (dec i)) 0)\n                              new-child-rng))\n          (aset new-rngs 32 (inc i))\n          (aset new-arr 32 new-rngs)))\n      (->VectorNode nil new-arr))))\n\n(defn slice-left [node shift start end]\n  (if (zero? shift)\n    ;; potentially return a short node\n    (let [arr     (.-arr node)\n          new-len (- (alength arr) start)\n          new-arr (make-array new-len)]\n      (array-copy arr start new-arr 0 new-len)\n      (->VectorNode nil new-arr))\n    (let [reg? (regular? node)\n          arr  (.-arr node)\n          rngs (if-not reg? (node-ranges node))\n          i    (bit-and (bit-shift-right start shift) 0x1f)\n          i    (if reg?\n                 i\n                 (loop [j i]\n                   (if (< start (aget rngs j))\n                     j\n                     (recur (inc j)))))\n          len  (if reg?\n                 (loop [i i]\n                   (if (or (== i 32) (nil? (aget arr i)))\n                     i\n                     (recur (inc i))))\n                 (aget rngs 32))\n          child-start (if (pos? i)\n                        (- start\n                           (if reg?\n                             (* i (bit-shift-left 1 shift))\n                             (aget rngs (dec i))))\n                        start)\n          child-end   (min (bit-shift-left 1 shift)\n                           (if (pos? i)\n                             (- end\n                                (if reg?\n                                  (* i (bit-shift-left 1 shift))\n                                  (aget rngs (dec i))))\n                             end))\n          new-child   (slice-left (aget arr i)\n                                  (- shift 5)\n                                  child-start\n                                  child-end)\n          new-len     (- len i)\n          new-len     (if (nil? new-child) (dec new-len) new-len)]\n      (cond\n        (zero? new-len)\n        nil\n\n        reg?\n        (let [new-arr (make-array 33)\n              rngs    (make-array 33)\n              rng0    (if (or (nil? new-child)\n                              (== shift 5)\n                              (regular? new-child))\n                        (- (bit-shift-left 1 shift)\n                           (bit-and (bit-shift-right start (- shift 5)) 0x1f))\n                        (last-range new-child))\n              step    (bit-shift-left 1 shift)]\n          (loop [j 0\n                 r rng0]\n            (when (< j new-len)\n              (aset rngs j r)\n              (recur (inc j) (+ r step))))\n          (when (> new-len 1)\n            (aset rngs (dec new-len) (- end start)))\n          (aset rngs 32 new-len)\n          (array-copy arr (if (nil? new-child) (inc i) i)\n                      new-arr 0\n                      new-len)\n          (if-not (nil? new-child)\n            (aset new-arr 0 new-child))\n          (aset new-arr 32 rngs)\n          (->VectorNode (.-edit node) new-arr))\n\n        :else\n        (let [new-arr  (make-array 33)\n              new-rngs (make-array 33)]\n          (loop [j 0 i i]\n            (when (< j new-len)\n              (aset new-rngs j (- (aget rngs i) start))\n              (recur (inc j) (inc i))))\n          (aset new-rngs 32 new-len)\n          (array-copy arr (if (nil? new-child) (inc i) i)\n                      new-arr 0\n                      new-len)\n          (if-not (nil? new-child)\n            (aset new-arr 0 new-child))\n          (aset new-arr 32 new-rngs)\n          (->VectorNode (.-edit node) new-arr))))))\n\n(declare splice-rrbts ->Transient)\n\n(deftype Vector [cnt shift root tail meta ^:mutable __hash]\n  Object\n  (toString [this]\n    (pr-str* this))\n\n  IPrintWithWriter\n  (-pr-writer [this writer opts]\n    (pr-sequential-writer writer pr-writer \"[\" \" \" \"]\" opts this))\n\n  IWithMeta\n  (-with-meta [this meta]\n    (Vector. cnt shift root tail meta __hash))\n\n  IMeta\n  (-meta [this]\n    meta)\n\n  ISequential\n  IEquiv\n  (-equiv [this that]\n    (equiv-sequential this that))\n\n  IHash\n  (-hash [this]\n    (caching-hash this hash-ordered-coll __hash))\n\n  ISeqable\n  (-seq [this]\n    (cond\n      (zero? cnt) nil\n      (zero? (tail-offset cnt tail)) (array-seq tail)\n      :else (rrb-chunked-seq this 0 0)))\n\n  ICounted\n  (-count [_]\n    cnt)\n\n  IIndexed\n  (-nth [this i]\n    (if (and (<= 0 i) (< i cnt))\n      (let [tail-off (- cnt (alength tail))]\n        (if (<= tail-off i)\n          (aget tail (- i tail-off))\n          (loop [i i node root shift shift]\n            (if (zero? shift)\n              (let [arr (.-arr node)]\n                (aget arr (bit-and (bit-shift-right i shift) 0x1f)))\n              (if (regular? node)\n                (let [arr (.-arr node)\n                      idx (bit-and (bit-shift-right i shift) 0x1f)]\n                  (loop [i     i\n                         node  (aget arr idx)\n                         shift (- shift 5)]\n                    (let [arr (.-arr node)\n                          idx (bit-and (bit-shift-right i shift) 0x1f)]\n                      (if (zero? shift)\n                        (aget arr idx)\n                        (recur i (aget arr idx) (- shift 5))))))\n                (let [arr  (.-arr node)\n                      rngs (node-ranges node)\n                      idx  (loop [j (bit-and (bit-shift-right i shift) 0x1f)]\n                             (if (< i (aget rngs j))\n                               j\n                               (recur (inc j))))\n                      i    (if (zero? idx)\n                             i\n                             (- i (aget rngs (dec idx))))]\n                  (recur i (aget arr idx) (- shift 5))))))))\n      (vector-index-out-of-bounds i cnt)))\n\n  (-nth [this i not-found]\n    (if (and (>= i 0) (< i cnt))\n      (-nth this i)\n      not-found))\n\n  IMapEntry\n  (-key [this]\n    (-nth this 0))\n\n  (-val [this]\n    (-nth this 1))\n\n  ICollection\n  (-conj [this val]\n    (if (< (alength tail) 32)\n      (let [tail-len (alength tail)\n            new-tail (make-array (inc tail-len))]\n        (array-copy tail 0 new-tail 0 tail-len)\n        (aset new-tail tail-len val)\n        (Vector. (inc cnt) shift root new-tail meta nil))\n      (let [tail-node (->VectorNode (.-edit root) tail)\n            new-tail  (let [new-arr (make-array 1)]\n                        (aset new-arr 0 val)\n                        new-arr)]\n        (if (overflow? root shift cnt)\n          (if (regular? root)\n            (let [new-arr  (make-array 32)\n                  new-root (->VectorNode (.-edit root) new-arr)]\n              (doto new-arr\n                (aset 0 root)\n                (aset 1 (new-path tail (.-edit root) shift tail-node)))\n              (Vector. (inc cnt) (+ shift 5) new-root new-tail meta nil))\n            (let [new-arr  (make-array 33)\n                  new-rngs (make-array 33)\n                  new-root (->VectorNode (.-edit root) new-arr)\n                  root-total-range (aget (node-ranges root) 31)]\n              (doto new-arr\n                (aset 0  root)\n                (aset 1  (new-path tail (.-edit root) shift tail-node))\n                (aset 32 new-rngs))\n              (doto new-rngs\n                (aset 0  root-total-range)\n                (aset 1  (+ root-total-range 32))\n                (aset 32 2))\n              (Vector. (inc cnt) (+ shift 5) new-root new-tail meta nil)))\n          (Vector. (inc cnt) shift\n                   (push-tail shift cnt (.-edit root) root tail-node)\n                   new-tail\n                   meta\n                   nil)))))\n\n  IEmptyableCollection\n  (-empty [_]\n    (with-meta cljs.core.PersistentVector.EMPTY meta))\n\n  IStack\n  (-peek [this]\n    (when (pos? cnt)\n      (-nth this (dec cnt))))\n\n  (-pop [this]\n    (cond\n      (zero? cnt)\n      (throw (js/Error. \"Can't pop empty vector\"))\n\n      (== 1 cnt)\n      (-with-meta cljs.core.PersistentVector.EMPTY meta)\n\n      (> (alength tail) 1)\n      (let [new-tail (make-array (dec (alength tail)))]\n        (array-copy tail 0 new-tail 0 (alength new-tail))\n        (Vector. (dec cnt) shift root new-tail meta nil))\n\n      :else\n      (let [new-tail (array-for cnt shift root tail (- cnt 2))\n            root-cnt (tail-offset cnt tail)\n            new-root (pop-tail shift root-cnt (.-edit root) root)]\n        (cond\n          (nil? new-root)\n          (Vector. (dec cnt) shift empty-node new-tail meta nil)\n\n          (and (> shift 5)\n               (nil? (aget (.-arr new-root) 1)))\n          (Vector. (dec cnt)\n                   (- shift 5)\n                   (aget (.-arr new-root) 0)\n                   new-tail\n                   meta\n                   nil)\n\n          :else\n          (Vector. (dec cnt) shift new-root new-tail meta nil)))))\n\n  IVector\n  (-assoc-n [this i val]\n    (cond\n      (and (<= 0 i) (< i cnt))\n      (let [tail-off (tail-offset cnt tail)]\n        (if (>= i tail-off)\n          (let [new-tail (make-array (alength tail))\n                idx (- i tail-off)]\n            (array-copy tail 0 new-tail 0 (alength tail))\n            (aset new-tail idx val)\n            (Vector. cnt shift root new-tail meta nil))\n          (Vector. cnt shift (do-assoc shift root i val) tail meta nil)))\n\n      (== i cnt) (-conj this val)\n      :else (vector-index-out-of-bounds i cnt)))\n\n  IReversible\n  (-rseq [this]\n    (if (pos? cnt)\n      (RSeq. this (dec cnt) nil)\n      nil))\n\n  IAssociative\n  (-assoc [this k v]\n    (-assoc-n this k v))\n\n  ILookup\n  (-lookup [this k]\n    (-nth this k nil))\n\n  (-lookup [this k not-found]\n    (-nth this k not-found))\n\n  IFn\n  (-invoke [this k]\n    (-nth this k))\n\n  (-invoke [this k not-found]\n    (-nth this k not-found))\n\n  IReduce\n  (-reduce [this f]\n    (ci-reduce this f))\n\n  (-reduce [this f start]\n    (ci-reduce this f start))\n\n  IKVReduce\n  (-kv-reduce [this f init]\n    (loop [i    0\n           j    0\n           init init\n           arr  (array-for cnt shift root tail i)\n           lim  (dec (alength arr))\n           step (inc lim)]\n      (let [init (f init (+ i j) (aget arr j))]\n        (if (reduced? init)\n          @init\n          (if (< j lim)\n            (recur i (inc j) init arr lim step)\n            (let [i (+ i step)]\n              (if (< i cnt)\n                (let [arr (array-for cnt shift root tail i)\n                      len (alength arr)\n                      lim (dec len)]\n                  (recur i 0 init arr lim len))\n                init)))))))\n\n  IComparable\n  (-compare [this that]\n    (compare-indexed this that))\n\n  IEditableCollection\n  (-as-transient [this]\n    (->Transient cnt\n                 shift\n                 (editable-root root)\n                 (editable-tail tail)\n                 (alength tail)))\n\n  PSliceableVector\n  (-slicev [this start end]\n    (let [new-cnt (- end start)]\n      (cond\n        (or (neg? start) (> end cnt))\n        (throw (js/Error. \"vector index out of bounds\"))\n\n        (== start end)\n        ;; NB. preserves metadata\n        (empty this)\n\n        (> start end)\n        (throw (js/Error. \"start index greater than end index\"))\n\n        :else\n        (let [tail-off (tail-offset cnt tail)]\n          (if (>= start tail-off)\n            (let [new-tail (make-array new-cnt)]\n              (array-copy tail (- start tail-off)\n                          new-tail 0\n                          new-cnt)\n              (Vector. new-cnt 5 empty-node new-tail meta nil))\n            (let [tail-cut? (> end tail-off)\n                  new-root  (if tail-cut?\n                              root\n                              (slice-right root shift end))\n                  new-root  (if (zero? start)\n                              new-root\n                              (slice-left new-root shift start\n                                          (min end tail-off)))\n                  new-tail  (if tail-cut?\n                              (let [new-len  (- end tail-off)\n                                    new-tail (make-array new-len)]\n                                (array-copy tail 0 new-tail 0 new-len)\n                                new-tail)\n                              (array-for new-cnt shift new-root (array)\n                                         (dec new-cnt)))\n                  new-root  (if tail-cut?\n                              new-root\n                              (pop-tail shift new-cnt (.-edit new-root)\n                                        new-root))]\n              (if (nil? new-root)\n                (Vector. new-cnt 5 empty-node new-tail meta nil)\n                (loop [r new-root\n                       s shift]\n                  (if (and (> s 5)\n                           (nil? (aget (.-arr r) 1)))\n                    (recur (aget (.-arr r) 0) (- s 5))\n                    (Vector. new-cnt s r new-tail meta nil))))))))))\n\n  PSpliceableVector\n  (-splicev [this that]\n    (splice-rrbts this (-as-rrbt that)))\n\n  AsRRBT\n  (-as-rrbt [this]\n    this))\n\n(extend-protocol AsRRBT\n  cljs.core.PersistentVector\n  (-as-rrbt [this]\n    (Vector. (count this) (.-shift this) (.-root this) (.-tail this)\n             (meta this) nil))\n\n  Subvec\n  (-as-rrbt [this]\n    (let [v     (.-v this)\n          start (.-start this)\n          end   (.-end this)]\n      (-slicev (-as-rrbt v) start end))))\n\n(defn shift-from-to [node from to]\n  (cond\n    (== from to)\n    node\n\n    (regular? node)\n    (recur (->VectorNode (.-edit node) (doto (make-array 32) (aset 0 node)))\n           (+ 5 from)\n           to)\n\n    :else\n    (recur (->VectorNode (.-edit node)\n                         (doto (make-array 33)\n                           (aset 0 node)\n                           (aset 32\n                                 (doto (make-array 33)\n                                   (aset 0  (last-range node))\n                                   (aset 32 1)))))\n           (+ 5 from)\n           to)))\n\n(defn slot-count [node shift]\n  (let [arr (.-arr node)]\n    (if (zero? shift)\n      (alength arr)\n      (if (regular? node)\n        (index-of-nil arr)\n        (let [rngs (node-ranges node)]\n          (aget rngs 32))))))\n\n(defn subtree-branch-count [node shift]\n  ;; NB. positive shifts only\n  (let [arr (.-arr node)\n        cs  (- shift 5)]\n    (if (regular? node)\n      (loop [i 0 sbc 0]\n        (if (== i 32)\n          sbc\n          (if-let [child (aget arr i)]\n            (recur (inc i) (+ sbc (slot-count child cs)))\n            sbc)))\n      (let [lim (aget (node-ranges node) 32)]\n        (loop [i 0 sbc 0]\n          (if (== i lim)\n            sbc\n            (let [child (aget arr i)]\n              (recur (inc i) (+ sbc (slot-count child cs))))))))))\n\n(defn leaf-seq [arr]\n  (mapcat #(.-arr %) (take (index-of-nil arr) arr)))\n\n(defn rebalance-leaves\n  [n1 cnt1 n2 cnt2 transferred-leaves]\n  (let [slc1 (slot-count n1 5)\n        slc2 (slot-count n2 5)\n        a    (+ slc1 slc2)\n        sbc1 (subtree-branch-count n1 5)\n        sbc2 (subtree-branch-count n2 5)\n        p    (+ sbc1 sbc2)\n        e    (- a (inc (quot (dec p) 32)))]\n    (cond\n      (<= e max-extra-search-steps)\n      (array n1 n2)\n\n      (<= (+ sbc1 sbc2) 1024)\n      (let [reg?    (zero? (mod p 32))\n            new-arr (make-array (if reg? 32 33))\n            new-n1  (->VectorNode nil new-arr)]\n        (loop [i  0\n               bs (partition-all 32\n                                 (concat (leaf-seq (.-arr n1))\n                                         (leaf-seq (.-arr n2))))]\n          (when-first [block bs]\n            (let [a (make-array (count block))]\n              (loop [i 0 xs (seq block)]\n                (when xs\n                  (aset a i (first xs))\n                  (recur (inc i) (next xs))))\n              (aset new-arr i (->VectorNode nil a))\n              (recur (inc i) (next bs)))))\n        (if-not reg?\n          (aset new-arr 32 (regular-ranges 5 p)))\n        (set! (.-val transferred-leaves) sbc2)\n        (array new-n1 nil))\n\n      :else\n      (let [reg?     (zero? (mod p 32))\n            new-arr1 (make-array 32)\n            new-arr2 (make-array (if reg? 32 33))\n            new-n1   (->VectorNode nil new-arr1)\n            new-n2   (->VectorNode nil new-arr2)]\n        (loop [i  0\n               bs (partition-all 32\n                                 (concat (leaf-seq (.-arr n1))\n                                         (leaf-seq (.-arr n2))))]\n          (when-first [block bs]\n            (let [a (make-array (count block))]\n              (loop [i 0 xs (seq block)]\n                (when xs\n                  (aset a i (first xs))\n                  (recur (inc i) (next xs))))\n              (if (< i 32)\n                (aset new-arr1 i (->VectorNode nil a))\n                (aset new-arr2 (- i 32) (->VectorNode nil a)))\n              (recur (inc i) (next bs)))))\n        (if-not reg?\n          (aset new-arr2 32 (regular-ranges 5 (- p 1024))))\n        (set! (.-val transferred-leaves) (- 1024 sbc1))\n        (array new-n1 new-n2)))))\n\n(defn child-seq [node shift cnt]\n  (let [arr  (.-arr node)\n        rngs (if (regular? node)\n               (regular-ranges shift cnt)\n               (node-ranges node))\n        cs   (if rngs (aget rngs 32) (index-of-nil arr))\n        cseq (fn cseq [c r]\n               (let [arr  (.-arr c)\n                     rngs (if (regular? c)\n                            (regular-ranges (- shift 5) r)\n                            (node-ranges c))\n                     gcs  (if rngs (aget rngs 32) (index-of-nil arr))]\n                 (map list\n                      (take gcs arr)\n                      (take gcs (map - rngs (cons 0 rngs))))))]\n    (mapcat cseq (take cs arr) (take cs (map - rngs (cons 0 rngs))))))\n\n(defn rebalance\n  [shift n1 cnt1 n2 cnt2 transferred-leaves]\n  (if (nil? n2)\n    (array n1 nil)\n    (let [slc1 (slot-count n1 shift)\n          slc2 (slot-count n2 shift)\n          a    (+ slc1 slc2)\n          sbc1 (subtree-branch-count n1 shift)\n          sbc2 (subtree-branch-count n2 shift)\n          p    (+ sbc1 sbc2)\n          e    (- a (inc (quot (dec p) 32)))]\n      (cond\n        (<= e max-extra-search-steps)\n        (array n1 n2)\n\n        (<= (+ sbc1 sbc2) 1024)\n        (let [new-arr  (make-array 33)\n              new-rngs (make-array 33)\n              new-n1   (->VectorNode nil new-arr)]\n          (loop [i  0\n                 bs (partition-all 32\n                                   (concat (child-seq n1 shift cnt1)\n                                           (child-seq n2 shift cnt2)))]\n            (when-first [block bs]\n              (let [a (make-array 33)\n                    r (make-array 33)]\n                (aset a 32 r)\n                (aset r 32 (count block))\n                (loop [i 0 o 0 gcs (seq block)]\n                  (when-first [[gc gcr] gcs]\n                    (aset a i gc)\n                    (aset r i (+ o gcr))\n                    (recur (inc i) (+ o gcr) (next gcs))))\n                (aset new-arr i (->VectorNode nil a))\n                (aset new-rngs i\n                      (+ (aget r (dec (aget r 32)))\n                         (if (pos? i) (aget new-rngs (dec i)) 0)))\n                (aset new-rngs 32 (inc i))\n                (recur (inc i) (next bs)))))\n          (aset new-arr 32 new-rngs)\n          (set! (.-val transferred-leaves) cnt2)\n          (array new-n1 nil))\n\n        :else\n        (let [new-arr1  (make-array 33)\n              new-arr2  (make-array 33)\n              new-rngs1 (make-array 33)\n              new-rngs2 (make-array 33)\n              new-n1    (->VectorNode nil new-arr1)\n              new-n2    (->VectorNode nil new-arr2)]\n          (loop [i  0\n                 bs (partition-all 32\n                                   (concat (child-seq n1 shift cnt1)\n                                           (child-seq n2 shift cnt2)))]\n            (when-first [block bs]\n              (let [a (make-array 33)\n                    r (make-array 33)]\n                (aset a 32 r)\n                (aset r 32 (count block))\n                (loop [i 0 o 0 gcs (seq block)]\n                  (when-first [[gc gcr] gcs]\n                    (aset a i gc)\n                    (aset r i (+ o gcr))\n                    (recur (inc i) (+ o gcr) (next gcs))))\n                (if (and (< i 32) (> (+ (* i 32) (count block)) sbc1))\n                  (let [tbs (- (+ (* i 32) (count block)) sbc1)\n                        li  (dec (aget r 32))\n                        d   (if (>= tbs 32)\n                              (aget r li)\n                              (- (aget r li) (aget r (- li tbs))))]\n                    (set! (.-val transferred-leaves)\n                          (+ (.-val transferred-leaves) d))))\n                (let [new-arr  (if (< i 32) new-arr1 new-arr2)\n                      new-rngs (if (< i 32) new-rngs1 new-rngs2)\n                      i        (mod i 32)]\n                  (aset new-arr i (->VectorNode nil a))\n                  (aset new-rngs i\n                        (+ (aget r (dec (aget r 32)))\n                           (if (pos? i) (aget new-rngs (dec i)) 0)))\n                  (aset new-rngs 32 (inc i)))\n                (recur (inc i) (next bs)))))\n          (aset new-arr1 32 new-rngs1)\n          (aset new-arr2 32 new-rngs2)\n          (array new-n1 new-n2))))))\n\n(defn zippath\n  [shift n1 cnt1 n2 cnt2 transferred-leaves]\n  (if (== shift 5)\n    (rebalance-leaves n1 cnt1 n2 cnt2 transferred-leaves)\n    (let [c1 (last-child n1)\n          c2 (first-child n2)\n          ccnt1 (if (regular? n1)\n                  (let [m (mod cnt1 (bit-shift-left 1 shift))]\n                    (if (zero? m) (bit-shift-left 1 shift) m))\n                  (let [rngs (node-ranges n1)\n                        i    (dec (aget rngs 32))]\n                    (if (zero? i)\n                      (aget rngs 0)\n                      (- (aget rngs i) (aget rngs (dec i))))))\n          ccnt2 (if (regular? n2)\n                  (let [m (mod cnt2 (bit-shift-left 1 shift))]\n                    (if (zero? m) (bit-shift-left 1 shift) m))\n                  (aget (node-ranges n2) 0))\n          next-transferred-leaves (Box. 0)\n          [new-c1 new-c2] (zippath (- shift 5) c1 ccnt1 c2 ccnt2\n                                   next-transferred-leaves)\n          d (.-val next-transferred-leaves)]\n      (set! (.-val transferred-leaves) (+ (.-val transferred-leaves) d))\n      (rebalance shift\n                 (if (identical? c1 new-c1)\n                   n1\n                   (replace-rightmost-child shift n1 new-c1 d))\n                 (+ cnt1 d)\n                 (if new-c2\n                   (if (identical? c2 new-c2)\n                     n2\n                     (replace-leftmost-child shift n2 cnt2 new-c2 d))\n                   (remove-leftmost-child shift n2))\n                 (- cnt2 d)\n                 transferred-leaves))))\n\n(defn squash-nodes [shift n1 cnt1 n2 cnt2]\n  (let [arr1  (.-arr n1)\n        arr2  (.-arr n2)\n        li1   (index-of-nil arr1)\n        li2   (index-of-nil arr2)\n        slots (concat (take li1 arr1) (take li2 arr2))]\n    (if (> (count slots) 32)\n      (array n1 n2)\n      (let [new-rngs (make-array 33)\n            new-arr  (make-array 33)\n            rngs1    (take li1 (if (regular? n1)\n                                 (regular-ranges shift cnt1)\n                                 (node-ranges n1)))\n            rngs2    (take li2 (if (regular? n2)\n                                 (regular-ranges shift cnt2)\n                                 (node-ranges n2)))\n            rngs2    (let [r (last rngs1)]\n                       (map #(+ % r) rngs2))\n            rngs     (concat rngs1 rngs2)]\n        (aset new-arr 32 new-rngs)\n        (loop [i 0 cs (seq slots)]\n          (when cs\n            (aset new-arr i (first cs))\n            (recur (inc i) (next cs))))\n        (loop [i 0 rngs (seq rngs)]\n          (if rngs\n            (do (aset new-rngs i (first rngs))\n                (recur (inc i) (next rngs)))\n            (aset new-rngs 32 i)))\n        (array (->VectorNode nil new-arr) nil)))))\n\n(defn splice-rrbts [v1 v2]\n  (cond\n    (zero? (count v1)) v2\n    (< (count v2) rrbt-concat-threshold) (into v1 v2)\n    :else\n    (let [s1 (.-shift v1)\n          s2 (.-shift v2)\n          r1 (.-root v1)\n          o? (overflow? r1 s1 (+ (count v1) (- 32 (alength (.-tail v1)))))\n          r1 (if o?\n               (let [tail      (.-tail v1)\n                     tail-node (->VectorNode nil tail)\n                     reg?      (and (regular? r1) (== (alength tail) 32))\n                     arr       (make-array (if reg? 32 33))]\n                 (aset arr 0 r1)\n                 (aset arr 1 (new-path* s1 tail-node))\n                 (if-not reg?\n                   (let [rngs (make-array 33)]\n                     (aset rngs 32 2)\n                     (aset rngs 0 (- (count v1) (alength tail)))\n                     (aset rngs 1 (count v1))\n                     (aset arr 32 rngs)))\n                 (->VectorNode nil arr))\n               (fold-tail r1 s1\n                          (tail-offset (.-cnt v1) (.-tail v1))\n                          (.-tail v1)))\n          s1 (if o? (+ s1 5) s1)\n          r2 (.-root v2)\n          s  (max s1 s2)\n          r1 (shift-from-to r1 s1 s)\n          r2 (shift-from-to r2 s2 s)\n          transferred-leaves (Box. 0)\n          [n1 n2] (zippath s\n                           r1 (count v1)\n                           r2 (- (count v2) (alength (.-tail v2)))\n                           transferred-leaves)\n          d (.-val transferred-leaves)\n          ncnt1   (+ (count v1) d)\n          ncnt2   (- (count v2) (alength (.-tail v2)) d)\n          [n1 n2] (if (identical? n2 r2)\n                    (squash-nodes s n1 ncnt1 n2 ncnt2)\n                    (array n1 n2))\n          ncnt1   (if n2\n                    ncnt1\n                    (+ ncnt1 ncnt2))\n          ncnt2   (if n2\n                    ncnt2\n                    0)]\n      (if n2\n        (let [arr      (make-array 33)\n              new-root (->VectorNode nil arr)]\n          (aset arr 0 n1)\n          (aset arr 1 n2)\n          (aset arr 32 (doto (make-array 33)\n                         (aset 0 ncnt1)\n                         (aset 1 (+ ncnt1 ncnt2))\n                         (aset 32 2)))\n          (Vector. (+ (count v1) (count v2)) (+ s 5) new-root (.-tail v2)\n                   nil nil))\n        (loop [r n1\n               s s]\n          (if (and (> s 5)\n                   (nil? (aget (.-arr r) 1)))\n            (recur (aget (.-arr r) 0) (- s 5))\n            (Vector. (+ (count v1) (count v2)) s r (.-tail v2)\n                     nil nil)))))))\n\n(deftype Transient [^:mutable cnt\n                    ^:mutable shift\n                    ^:mutable root\n                    ^:mutable tail\n                    ^:mutable tidx]\n  ITransientCollection\n  (-conj! [this o]\n    (if ^boolean (.-edit root)\n      (if (< tidx 32)\n        (do (aset tail tidx o)\n            (set! cnt  (inc cnt))\n            (set! tidx (inc tidx))\n            this)\n        (let [tail-node (->VectorNode (.-edit root) tail)\n              new-tail  (make-array 32)]\n          (aset new-tail 0 o)\n          (set! tail new-tail)\n          (set! tidx 1)\n          (if (overflow? root shift cnt)\n            (if (regular? root)\n              (let [new-arr (make-array 32)]\n                (doto new-arr\n                  (aset 0 root)\n                  (aset 1 (new-path tail (.-edit root) shift tail-node)))\n                (set! root  (->VectorNode (.-edit root) new-arr))\n                (set! shift (+ shift 5))\n                (set! cnt   (inc cnt))\n                this)\n              (let [new-arr  (make-array 33)\n                    new-rngs (make-array 33)\n                    new-root (->VectorNode (.-edit root) new-arr)\n                    root-total-range (aget (node-ranges root) 31)]\n                (doto new-arr\n                  (aset 0  root)\n                  (aset 1  (new-path tail (.-edit root) shift tail-node))\n                  (aset 32 new-rngs))\n                (doto new-rngs\n                  (aset 0  root-total-range)\n                  (aset 1  (+ root-total-range 32))\n                  (aset 32 2))\n                (set! root  new-root)\n                (set! shift (+ shift 5))\n                (set! cnt   (inc cnt))\n                this))\n            (let [new-root (push-tail! shift cnt (.-edit root) root tail-node)]\n              (set! root new-root)\n              (set! cnt  (inc cnt))\n              this))))\n      (throw (js/Error. \"conj! after persistent!\"))))\n\n  (-persistent! [this]\n    (if ^boolean (.-edit root)\n      (do (set! (.-edit root) nil)\n          (let [trimmed-tail (make-array tidx)]\n            (array-copy tail 0 trimmed-tail 0 tidx)\n            (Vector. cnt shift root trimmed-tail nil nil)))\n      (throw (js/Error. \"persistent! called twice\"))))\n\n  ITransientAssociative\n  (-assoc! [this key val]\n    (-assoc-n! this key val))\n\n  ITransientVector\n  (-assoc-n! [this i val]\n    (if ^boolean (.-edit root)\n      (cond\n        (and (<= 0 i) (< i cnt))\n        (let [tail-off (- cnt tidx)]\n          (if (<= tail-off i)\n            (aset tail (- i tail-off) val)\n            (set! root (do-assoc! shift (.-edit root) root i val)))\n          this)\n\n        (== i cnt) (-conj! this val)\n\n        :else (vector-index-out-of-bounds i cnt))\n      (throw (js/Error. \"assoc! after persistent!\"))))\n\n  (-pop! [this]\n    (if ^boolean (.-edit root)\n      (cond\n        (zero? cnt)\n        (throw (js/Error. \"Can't pop empty vector\"))\n\n        (== 1 cnt)\n        (do (set! cnt  0)\n            (set! tidx 0)\n            (aset tail 0 nil)\n            this)\n\n        (> tidx 1)\n        (do (set! cnt  (dec cnt))\n            (set! tidx (dec tidx))\n            (aset tail tidx nil)\n            this)\n\n        :else\n        (let [new-tail-base (array-for cnt shift root tail (- cnt 2))\n              new-tail      (aclone new-tail-base)\n              new-tidx      (alength new-tail-base)\n              new-root      (pop-tail! shift cnt (.-edit root) root)]\n          (cond\n            (nil? new-root)\n            (do (set! cnt  (dec cnt))\n                (set! root (ensure-editable (.-edit root) empty-node))\n                (set! tail new-tail)\n                (set! tidx new-tidx)\n                this)\n\n            (and (> shift 5)\n                 (nil? (aget (.-arr new-root) 1)))\n            (do (set! cnt   (dec cnt))\n                (set! shift (- shift 5))\n                (set! root  (aget (.-arr new-root) 0))\n                (set! tail  new-tail)\n                (set! tidx  new-tidx)\n                this)\n\n            :else\n            (do (set! cnt  (dec cnt))\n                (set! root new-root)\n                (set! tail new-tail)\n                (set! tidx new-tidx)\n                this))))\n      (throw (js/Error. \"count after persistent!\"))))\n\n  ICounted\n  (-count [this]\n    (if ^boolean (.-edit root)\n      cnt\n      (throw (js/Error. \"count after persistent!\")))))\n"]}