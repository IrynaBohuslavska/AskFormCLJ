{"version":3,"sources":["clojure/core/rrb_vector/trees.cljs"],"mappings":"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","names":["clojure.core.rrb-vector.trees/tail-offset","cnt","tail","clojure.core.rrb-vector.trees/array-for","shift","root","i","node","clojure.core.rrb-vector.nodes/regular?","rngs","clojure.core.rrb-vector.nodes/node-ranges","j","cljs.core/vector-index-out-of-bounds","clojure.core.rrb-vector.trees/new-path","edit","current-node","s","n","arr","ret","cljs.core/->VectorNode","clojure.core.rrb-vector.trees/push-tail","root-edit","tail-node","cljs.core/aclone","subidx","temp__5751__auto__","child","new-carr","new-child","li","cret","ccnt","G__63658","G__63659","G__63660","G__63661","G__63662","clojure.core.rrb-vector.trees/pop-tail","G__63663","G__63664","G__63665","G__63666","new-rngs","child-cnt","G__63667","G__63668","G__63669","G__63670","rng","clojure.core.rrb-vector.nodes/last-range","diff","clojure.core.rrb-vector.trees/do-assoc","val","clojure.core.rrb-vector.nodes/clone","G__63671","G__63672","G__63673","G__63674"],"sourcesContent":["(ns clojure.core.rrb-vector.trees\n  (:refer-clojure :exclude [array-for push-tail pop-tail new-path do-assoc])\n  (:require [clojure.core.rrb-vector.nodes\n             :refer [regular? clone node-ranges last-range]]))\n\n(defn tail-offset [cnt tail]\n  (- cnt (alength tail)))\n\n(defn array-for [cnt shift root tail i]\n  (if (and (<= 0 i) (< i cnt))\n    (if (>= i (tail-offset cnt tail))\n      tail\n      (loop [i i node root shift shift]\n        (if (zero? shift)\n          (.-arr node)\n          (if (regular? node)\n            (loop [node  (aget (.-arr node)\n                               (bit-and (bit-shift-right i shift) 0x1f))\n                   shift (- shift 5)]\n              (if (zero? shift)\n                (.-arr node)\n                (recur (aget (.-arr node)\n                             (bit-and (bit-shift-right i shift) 0x1f))\n                       (- shift 5))))\n            (let [rngs (node-ranges node)\n                  j    (loop [j (bit-and (bit-shift-right i shift) 0x1f)]\n                         (if (< i (aget rngs j))\n                           j\n                           (recur (inc j))))\n                  i    (if (pos? j)\n                         (- i (aget rngs (dec j)))\n                         i)]\n              (recur i\n                     (aget (.-arr node) j)\n                     (- shift 5)))))))\n    (vector-index-out-of-bounds i cnt)))\n\n(defn new-path [tail edit shift current-node]\n  (if (== (alength tail) 32)\n    (loop [s 0 n current-node]\n      (if (== s shift)\n        n\n        (let [arr (make-array 32)\n              ret (->VectorNode edit arr)]\n          (aset arr 0 n)\n          (recur (+ s 5) ret))))\n    (loop [s 0 n current-node]\n      (if (== s shift)\n        n\n        (let [arr  (make-array 33)\n              rngs (make-array 33)\n              ret  (->VectorNode edit arr)]\n          (aset arr 0 n)\n          (aset arr 32 rngs)\n          (aset rngs 32 1)\n          (aset rngs 0 (alength tail))\n          (recur (+ s 5) ret))))))\n\n(defn push-tail [shift cnt root-edit current-node tail-node]\n  (if (regular? current-node)\n    (let [arr (aclone (.-arr current-node))\n          ret (->VectorNode (.-edit current-node) arr)]\n      (loop [n ret shift shift]\n        (let [arr    (.-arr n)\n              subidx (bit-and (bit-shift-right (dec cnt) shift) 0x1f)]\n          (if (== shift 5)\n            (aset arr subidx tail-node)\n            (if-let [child (aget arr subidx)]\n              (let [new-carr  (aclone (.-arr child))\n                    new-child (->VectorNode root-edit new-carr)]\n                (aset arr subidx new-child)\n                (recur new-child (- shift 5)))\n              (aset arr subidx\n                    (new-path (.-arr tail-node)\n                              root-edit\n                              (- shift 5)\n                              tail-node))))))\n      ret)\n    (let [arr  (aclone (.-arr current-node))\n          rngs (node-ranges current-node)\n          li   (dec (aget rngs 32))\n          ret  (->VectorNode (.-edit current-node) arr)\n          cret (if (== shift 5)\n                 nil\n                 (let [child (aget arr li)\n                       ccnt  (if (pos? li)\n                               (- (aget rngs li) (aget rngs (dec li)))\n                               (aget rngs 0))]\n                   (if-not (== ccnt (bit-shift-left 1 shift))\n                     (push-tail (- shift 5) (inc ccnt) root-edit\n                                child\n                                tail-node))))]\n      (if cret\n        (do (aset arr li cret)\n            (aset rngs li (+ (aget rngs li) 32))\n            ret)\n        (do (aset arr (inc li)\n                  (new-path (.-arr tail-node)\n                            root-edit\n                            (- shift 5)\n                            tail-node))\n            (aset rngs (inc li) (+ (aget rngs li) 32))\n            (aset rngs 32 (inc (aget rngs 32)))\n            ret)))))\n\n(defn pop-tail [shift cnt root-edit current-node]\n  (if (regular? current-node)\n    (let [subidx (bit-and (bit-shift-right (dec cnt) shift) 0x1f)]\n      (cond\n        (> shift 5)\n        (let [new-child (pop-tail (- shift 5) cnt root-edit\n                                  (aget (.-arr current-node) subidx))]\n          (if (and (nil? new-child) (zero? subidx))\n            nil\n            (let [arr (aclone (.-arr current-node))]\n              (aset arr subidx new-child)\n              (->VectorNode root-edit arr))))\n\n        (zero? subidx)\n        nil\n\n        :else\n        (let [arr (aclone (.-arr current-node))]\n          (aset arr subidx nil)\n          (->VectorNode root-edit arr))))\n    (let [subidx (bit-and (bit-shift-right (dec cnt) shift) 0x1f)\n          rngs   (node-ranges current-node)\n          subidx (loop [subidx subidx]\n                   (if (or (zero? (int (aget rngs (inc subidx))))\n                           (== subidx 31))\n                     subidx\n                     (recur (inc subidx))))\n          new-rngs (aclone rngs)]\n      (cond\n        (> shift 5)\n        (let [child     (aget (.-arr current-node) subidx)\n              child-cnt (if (zero? subidx)\n                          (aget rngs 0)\n                          (- (aget rngs subidx) (aget rngs (dec subidx))))\n              new-child (pop-tail (- shift 5) child-cnt root-edit child)]\n          (cond\n            (and (nil? new-child) (zero? subidx))\n            nil\n\n            (regular? child)\n            (let [arr (aclone (.-arr current-node))]\n              (aset new-rngs subidx (- (aget new-rngs subidx) 32))\n              (aset arr subidx new-child)\n              (aset arr 32 new-rngs)\n              (if (nil? new-child)\n                (aset new-rngs 32 (dec (aget new-rngs 32))))\n              (->VectorNode root-edit arr))\n\n            :else\n            (let [rng  (last-range child)\n                  diff (- rng (if new-child (last-range new-child) 0))\n                  arr  (aclone (.-arr current-node))]\n              (aset new-rngs subidx (- (aget new-rngs subidx) diff))\n              (aset arr subidx new-child)\n              (aset arr 32 new-rngs)\n              (if (nil? new-child)\n                (aset new-rngs 32 (dec (aget new-rngs 32))))\n              (->VectorNode root-edit arr))))\n\n        (zero? subidx)\n        nil\n\n        :else\n        (let [arr      (aclone (.-arr current-node))\n              child    (aget arr subidx)\n              new-rngs (aclone rngs)]\n          (aset arr subidx nil)\n          (aset arr 32 new-rngs)\n          (aset new-rngs subidx 0)\n          (aset new-rngs 32 (dec (aget new-rngs 32)))\n          (->VectorNode root-edit arr))))))\n\n(defn do-assoc [shift current-node i val]\n  (if (regular? current-node)\n    (let [node (clone shift current-node)]\n      (loop [shift shift\n             node  node]\n        (if (zero? shift)\n          (let [arr (.-arr node)]\n            (aset arr (bit-and i 0x1f) val))\n          (let [arr    (.-arr node)\n                subidx (bit-and (bit-shift-right i shift) 0x1f)\n                child  (clone shift (aget arr subidx))]\n            (aset arr subidx child)\n            (recur (- shift 5) child))))\n      node)\n    (let [arr    (aclone (.-arr current-node))\n          rngs   (node-ranges current-node)\n          subidx (bit-and (bit-shift-right i shift) 0x1f)\n          subidx (loop [subidx subidx]\n                   (if (< i (int (aget rngs subidx)))\n                     subidx\n                     (recur (inc subidx))))\n          i      (if (zero? subidx) i (- i (aget rngs (dec subidx))))]\n      (aset arr subidx\n            (do-assoc (- shift 5) (aget arr subidx) i val))\n      (->VectorNode (.-edit current-node) arr))))\n"]}