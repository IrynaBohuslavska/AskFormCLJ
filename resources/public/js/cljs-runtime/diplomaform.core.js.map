{"version":3,"sources":["diplomaform/core.cljs"],"mappings":";AAcA,AAAKA,0BACH,qDAAA,mFAAA,mFAAA,IAAA,gEAAA,mFAAA,SAAA,3XAACC;AAIH,AAAA,4BAAA,oCAAAC,hEAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,+DAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,iEAAA,iBAAAG,lFAAMD,4EAAUS;AAAhB,AAAA,IAAAP,aAAAD;aAAA,AAAAE,4CAAAD,WAAA,IAAA,pEAAyBQ;AAAzB,AACE,oBAAIA;AACF,OAAA,mFAAO,AAACC,4DAAqBnB,wBAAOiB,MAAMC;;AAC1C,OAAA,mFAAO,AAACC,4DAAqBnB,wBAAOiB;;;;AAHxC,CAAA,oDAAA,pDAAMT;;AAAN;AAAA,CAAA,8CAAA,WAAAI,zDAAMJ;AAAN,AAAA,IAAAK,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAI,qBAAA;AAAA,AAAA,OAAAA,wDAAAH,SAAAD;;;AAAA,AAQA,4BAAA,5BAAMQ,gEAAUH;AAAhB,AACE,IAAAI,WAAMJ;IAANI,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,qFAAA,AAAA,4HAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,2GAAA,AAAA,mEAAA,AAAA,qCAAA,AAAA,GAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,iDAAA,AAAA,KAAA,kBAAAE,yCAAA,AAAA,AAAAA,uDAAA;;;KAAA;AAAA,oFAAA,AAAA,0HAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,6GAAA,AAAA,gEAAA,AAAA,sCAAA,AAAA,KAAA,AAAA,IAAA,AAAA,KAAA,AAAA,KAAA,AAAA,iDAAA,AAAA,KAAA,kBAAAC,wCAAA,AAAA,AAAAA,sDAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,mEAAAJ;;;;AASF,gCAAA,hCAAMK;AAAN,AACE;AAAA,AACE,IAAMC,OAAK,AAAA,mGAAe,oBAAA,pBAACC;AAA3B,AAAA,0FAAA,mDAAA,mFAEID;;;AAKR,8BAAA,9BAAME;AAAN,AACE,wDAAA,jDAACC,oIAAaJ,sCAAc,wBAAA,xBAAiBK;;AAE/C,8BAAA,9BAAMC;AAAN,AACE,AAACC;;AACD,2CAAA,2CAAA,tFAACC,yJAEC,WAAKC;AAAL,AACE,IAAMC,QAAM,AAACC,8BAAqBrC,wBAAOmC;IACnCG,eAAa,AAAA,mFAAO,AAAA,mFAAQF;IAC5BG,eAAa,AAAA,gGAAcH;AAFjC,AAGE,AAACI,0BAAqBC;;AACtB,0BAAA,sDAAA,2CAAA,6GAAA,xOAACC,gMAAmC,AAACtB,0BAASkB,mFACVC;;AACpC,OAACI,+BAAqBR;GAT5B,qEAYE,WAAKA;AAAL,AACE,OAACS,mBAAQ,AAACP,8BAAqBrC,wBAAOmC;;;AAC1C,AAACU;;AACD,OAAChB","names":["diplomaform.core/router","reitit.frontend.router","var_args","args__4835__auto__","len__4829__auto__","i__4830__auto__","argseq__4836__auto__","cljs.core/IndexedSeq","diplomaform.core/path-for","p__63818","vec__63819","cljs.core.nth","seq63815","G__63816","cljs.core/first","cljs.core/next","self__4816__auto__","route","params","reitit.frontend.match_by_name","diplomaform.core/page-for","G__63822","cljs.core/Keyword","diplomaform.screens.home.core/home-page","diplomaform.screens.stats.core/diagram","js/Error","diplomaform.core/current-page","page","reagent.session/get","diplomaform.core/mount-root","reagent.dom.render","js/document","diplomaform.core/init!","clerk.core/initialize!","accountant.core/configure-navigation!","path","match","reitit.frontend/match-by-path","current-page","route-params","reagent.core/after-render","clerk.core/after-render!","reagent.session/put!","clerk.core/navigate-page!","cljs.core/boolean","accountant.core/dispatch-current!"],"sourcesContent":["(ns diplomaform.core\n  (:require\n   [reagent.core :as reagent :refer [atom]]\n   [diplomaform.screens.home.core :refer [home-page]]\n   [diplomaform.screens.stats.core :refer [diagram]]\n   [reagent.dom :as rdom]\n   [reagent.session :as session]\n   [reitit.frontend :as reitit]\n   [clerk.core :as clerk]\n   [accountant.core :as accountant]))\n\n;; -------------------------\n;; Routes\n\n(def router\n  (reitit/router\n   [[\"/\" :index]\n    [\"/stats\" :stats]]))\n\n(defn path-for [route & [params]]\n  (if params\n    (:path (reitit/match-by-name router route params))\n    (:path (reitit/match-by-name router route))))\n\n;; -------------------------\n;; Translate routes -> page components\n\n(defn page-for [route]\n  (case route\n    :index #'home-page\n    :stats #'diagram\n))\n\n\n;; -------------------------\n;; Page mounting component\n\n(defn current-page []\n  (fn []\n    (let [page (:current-page (session/get :route))]\n      [:div\n       [page]])))\n\n;; -------------------------\n;; Initialize app\n\n(defn mount-root []\n  (rdom/render [current-page] (.getElementById js/document \"app\")))\n\n(defn init! []\n  (clerk/initialize!)\n  (accountant/configure-navigation!\n   {:nav-handler\n    (fn [path]\n      (let [match (reitit/match-by-path router path)\n            current-page (:name (:data  match))\n            route-params (:path-params match)]\n        (reagent/after-render clerk/after-render!)\n        (session/put! :route {:current-page (page-for current-page)\n                              :route-params route-params})\n        (clerk/navigate-page! path)\n        ))\n    :path-exists?\n    (fn [path]\n      (boolean (reitit/match-by-path router path)))})\n  (accountant/dispatch-current!)\n  (mount-root))\n"]}